
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User{
  id String @id @default(uuid())
  username String
  email String @unique
  role Role @default(USER)
  googleId String @unique
  profilePicture String?
  isEmailVerified Boolean @default(true)
  comments Comment[]
  likes Like[]
  opinions UnpopularOpinion[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Post {
  id            String      @id @default(uuid())
  title         String
  content       String
  
  directedBy    String
  genres        String[]
  images        PostImage[]
  comments      Comment[]
  likes         Like[]
  viewCount     Int         @default(0)
  adminId       Int         @default(1)
  year          Int
  ratingCategories Json
  reviewPosterImageUrl String?
  streamingAt   String
  posterImageUrl String?     // Reference to the poster image ID
  relatedPostIds String[]   // Array of related post IDs for "You may also like"
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
}
model Article{
  id String @id @default(uuid())
  title String
  shortDescription String
  slug String
  author String
  mainImageUrl String
  published Boolean @default(true)
  publishedAt DateTime?
  viewCount Int @default(0)
  images ArticleImage[]
  comments Comment[]
  likes Like[]
  blocks ContentBlock[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContentBlock{
  id String @id @default(uuid())
  articleId String
  type BlockType
  content Json
  order Int

  article Article @relation(fields: [articleId], references: [id],onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([articleId, order])
}

enum BlockType{
  PARAGRAPH
  HEADING
  IMAGE
  LIST
  QUOTE
  DIVIDER
}

model TopPicks{
  id String @id @default(uuid())
  title String
  posterImageUrl String
  genre String
  year Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostImage {
  id        String   @id @default(uuid())
  imageUrl  String
  postId    String
  post      Post     @relation(fields: [postId], references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}
model ArticleImage {
  id String    @id @default(uuid())
  imageUrl String
  articleId String
  article Article @relation(fields: [articleId], references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Comment{
  id String @id @default(uuid())
  content String
  userId String
  postId String?
  opinionId String?
  parentCommentId String?
  articleId String?
  replies Comment[] @relation(name: "CommentToComment")
  user User @relation(fields: [userId], references: [id])
  post Post? @relation(fields: [postId], references: [id],onDelete: Cascade)
  article Article? @relation(fields: [articleId], references: [id],onDelete: Cascade)
  opinion UnpopularOpinion? @relation(fields: [opinionId], references: [id])
  parentComment Comment? @relation("CommentToComment",fields: [parentCommentId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Like{
  id String @id @default(uuid())
  userId String
  postId String?
  opinionId String?
  articleId String?
  user User @relation(fields: [userId], references: [id])
  post Post? @relation(fields: [postId], references: [id],onDelete: Cascade)
  article Article? @relation(fields: [articleId], references: [id],onDelete: Cascade)
  opinion UnpopularOpinion? @relation(fields: [opinionId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, postId])
}

model UnpopularOpinion{
  id String @id @default(uuid())
  userId String
  content String
  genres String[]
  
  user User @relation(fields: [userId], references: [id])
  likes Like[]
  comments Comment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

model TrendingMovie {
  id               Int      @id @default(autoincrement())
  tmdbId           Int      @map("tmdb_id")
  title            String
  posterPath       String?  @map("poster_path")
  backdropPath     String?  @map("backdrop_path")
  overview         String?  @db.Text
  releaseDate      DateTime @map("release_date") @db.Date
  voteAverage      Decimal  @map("vote_average") @db.Decimal(3, 1)
  voteCount        Int      @map("vote_count")
  popularityScore  Decimal  @map("popularity_score") @db.Decimal(10, 2)
  trendingRank     Int      @map("trending_rank")
  genreIds         String   @map("genre_ids") // JSON as string - you can use Json type for PostgreSQL
  lastUpdated      DateTime @map("last_updated") @default(now())
  createdAt        DateTime @map("created_at") @default(now())

  @@index([tmdbId])
  @@index([trendingRank])
  @@index([lastUpdated])
  @@map("trending_movies")
}

model TrendingNews {
  id            Int      @id @default(autoincrement())
  title         String
  description   String   @db.Text
  content       String?  @db.Text
  url           String   @unique
  sourceName    String   @map("source_name")
  author        String?
  publishedAt   DateTime @map("published_at")
  imageUrl      String?  @map("image_url")
  category      String
  trendingScore Int?     @map("trending_score")
  lastUpdated   DateTime @map("last_updated") @default(now())
  createdAt     DateTime @map("created_at") @default(now())

  @@index([publishedAt])
  @@index([lastUpdated])
  @@index([category])
  @@map("trending_news")
}

enum ContentType { 
  discussion
  recommendation
  analysis
  matchup
}

enum ContentStatus {
  active
  archived
  draft
}

model AITrendingContent {
  id              Int           @id @default(autoincrement())
  title           String
  content         String        @db.Text
  contentType     ContentType   @map("content_type")
  promptUsed      String?       @map("prompt_used") @db.Text
  status          ContentStatus @default(active)
  viewCount       Int           @map("view_count") @default(0)
  engagementScore Decimal?      @map("engagement_score") @db.Decimal(5, 2)
  expiresAt       DateTime?     @map("expires_at")
  createdAt       DateTime      @map("created_at") @default(now())
  updatedAt       DateTime      @map("updated_at") @updatedAt

  @@index([contentType])
  @@index([status])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("ai_trending_content")
}

enum SectionType {
  movies
  news
  ai
}

enum RefreshStatus {
  success
  failed
  in_progress
}

model ContentRefreshLog {
  id                    Int           @id @default(autoincrement())
  sectionType           SectionType   @map("section_type")
  lastRefreshAttempt    DateTime      @map("last_refresh_attempt") @default(now())
  lastSuccessfulRefresh DateTime?     @map("last_successful_refresh")
  status                RefreshStatus
  errorMessage          String?       @map("error_message") @db.Text
  recordsUpdated        Int?          @map("records_updated")

  @@index([sectionType])
  @@index([lastSuccessfulRefresh])
  @@index([status])
  @@map("content_refresh_log")
}